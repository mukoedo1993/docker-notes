
#Step 1: Building an image
#Syntax: docker build -t <image-name> <location of dockerfile>
-------------------------------------------------------------------
sudo docker build -t my-httpd . #dot specifies the location of Dockerfile

#Step 2: List all the images
#Syntax: docker images
# Myhttpd image was created on top of the httpd image which
# was automatically downloaded by docker.
-------------------------------------------------------------------
sudo docker images

#Step 3: Inspect the Image(TIMESTAMP)
------------------------------------------------------------------
sudo docker inspect <image-id>

#Step 4: Running a container from the image
#Syntax: docker run -itd --name <container-name> -p <host-port>:<port in container> image-name:tag
# note in the above syntax:
# -d : represents (detached mode), note that if you dont run this in detached mode, the life of the container will be the life of the terminal in which you are executing it.
# -p : represents the host-port to container-port mapping, if you substitute it with -P you will get a random port allocated by docker
# --name : represents the name of the container 
-------------------------------------------------------------------
sudo docker run -itd --name my-http-container-1 -p 5555:80 my-httpd:latest
sudo docker run -itd --name my-http-container-2 -p 5556:80 my-httpd:latest
sudo docker run -itd --name my-http-container-with-random-port -P my-httpd:latest # randomly given

#note if you run this it will NOT run in detached mode.
sudo docker run -it --name my-http-container-not-detached-mode -p 5557:80 my-httpd:latest

Step 5: View all the containers
-------------------------------------------------------------------
# Shows all the containers which are running
sudo docker ps 

#Shows all the containers stopped and running
sudo docker ps -a

Step 6: Inspect the container and image
-------------------------------------------------------------------
sudo docker inspect <container-id>

Step 7: View Container logs
-------------------------------------------------------------------

# View the logs of the container
sudo docker logs <container-id>

# Tail the logs of the container
# rolling login: you want to tell the logs
# when the container get started up.
sudo docker logs -ft <container-id>

Step 8: Stop the container
-------------------------------------------------------------------
sudo docker stop <container-id>

Step 9: Stop the container
-------------------------------------------------------------------
sudo docker start <container-id>

Step 10: Logging into the container
-------------------------------------------------------------------
#Note: The container must be started before we can do this.
sudo docker exec -it <container-id> /bin/bash
# inside the terminal...
apt-get update && apt-get install -y procps
ps -ef|grep 1
root@49c1d9b301db:/usr/local/apache2/conf# cat httpd.conf |grep pictolearn

---
root@49c1d9b301db:/usr/local/apache2/conf# cat httpd.conf |grep pictolearn
DocumentRoot "/usr/local/apache2/htdocs/pictolearn"
<Directory "/usr/local/apache2/htdocs/pictolearn">
---


Step 11: Remove all the containers and images
-------------------------------------------------------------------
#Note: To remove an image the corresponding container built from that image will need to be removed.

#Remove a specific container
sudo docker rm <container-id>

#Remove all containers
sudo docker rm $(sudo docker ps -a -q)

# remove image (note: no containers for this image should be running)
sudo docker rmi <image-id>

# remove all images
sudo docker rmi $(sudo docker images -q)

------------------------------------------------------------------
# remove stopped containers
sudo docker container prune